// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ListingBid extends ethereum.Event {
  get params(): ListingBid__Params {
    return new ListingBid__Params(this);
  }
}

export class ListingBid__Params {
  _event: ListingBid;

  constructor(event: ListingBid) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get listedAt(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get bidder(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get bidAt(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class ListingClosed extends ethereum.Event {
  get params(): ListingClosed__Params {
    return new ListingClosed__Params(this);
  }
}

export class ListingClosed__Params {
  _event: ListingClosed;

  constructor(event: ListingClosed) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get listedAt(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get lastBid(): ListingClosedLastBidStruct {
    return changetype<ListingClosedLastBidStruct>(
      this._event.parameters[2].value.toTuple()
    );
  }
}

export class ListingClosedLastBidStruct extends ethereum.Tuple {
  get bidder(): Address {
    return this[0].toAddress();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }

  get bidAt(): BigInt {
    return this[2].toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TokenListed extends ethereum.Event {
  get params(): TokenListed__Params {
    return new TokenListed__Params(this);
  }
}

export class TokenListed__Params {
  _event: TokenListed;

  constructor(event: TokenListed) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get seller(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get minimumBidIncrement(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get endDate(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get listedAt(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get lastBid(): TokenListedLastBidStruct {
    return changetype<TokenListedLastBidStruct>(
      this._event.parameters[5].value.toTuple()
    );
  }
}

export class TokenListedLastBidStruct extends ethereum.Tuple {
  get bidder(): Address {
    return this[0].toAddress();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }

  get bidAt(): BigInt {
    return this[2].toBigInt();
  }
}

export class DiffusedMarketplace__getListingResultValue0Struct extends ethereum.Tuple {
  get seller(): Address {
    return this[0].toAddress();
  }

  get minimumBidIncrement(): BigInt {
    return this[1].toBigInt();
  }

  get endDate(): BigInt {
    return this[2].toBigInt();
  }

  get listedAt(): BigInt {
    return this[3].toBigInt();
  }

  get lastBid(): DiffusedMarketplace__getListingResultValue0LastBidStruct {
    return changetype<DiffusedMarketplace__getListingResultValue0LastBidStruct>(
      this[4].toTuple()
    );
  }
}

export class DiffusedMarketplace__getListingResultValue0LastBidStruct extends ethereum.Tuple {
  get bidder(): Address {
    return this[0].toAddress();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }

  get bidAt(): BigInt {
    return this[2].toBigInt();
  }
}

export class DiffusedMarketplace extends ethereum.SmartContract {
  static bind(address: Address): DiffusedMarketplace {
    return new DiffusedMarketplace("DiffusedMarketplace", address);
  }

  getAdditionalMsgValue(tokenId: BigInt): BigInt {
    let result = super.call(
      "getAdditionalMsgValue",
      "getAdditionalMsgValue(uint256):(int256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return result[0].toBigInt();
  }

  try_getAdditionalMsgValue(tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAdditionalMsgValue",
      "getAdditionalMsgValue(uint256):(int256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getClaim(tokenId: BigInt): Address {
    let result = super.call("getClaim", "getClaim(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getClaim(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("getClaim", "getClaim(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getFunds(user: Address): BigInt {
    let result = super.call("getFunds", "getFunds(address):(uint256)", [
      ethereum.Value.fromAddress(user)
    ]);

    return result[0].toBigInt();
  }

  try_getFunds(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getFunds", "getFunds(address):(uint256)", [
      ethereum.Value.fromAddress(user)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getListing(
    tokenId: BigInt
  ): DiffusedMarketplace__getListingResultValue0Struct {
    let result = super.call(
      "getListing",
      "getListing(uint256):((address,uint256,uint256,uint256,(address,uint256,uint256)))",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return changetype<DiffusedMarketplace__getListingResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getListing(
    tokenId: BigInt
  ): ethereum.CallResult<DiffusedMarketplace__getListingResultValue0Struct> {
    let result = super.tryCall(
      "getListing",
      "getListing(uint256):((address,uint256,uint256,uint256,(address,uint256,uint256)))",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<DiffusedMarketplace__getListingResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getLockedBalance(user: Address): BigInt {
    let result = super.call(
      "getLockedBalance",
      "getLockedBalance(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toBigInt();
  }

  try_getLockedBalance(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLockedBalance",
      "getLockedBalance(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMinBid(tokenId: BigInt): BigInt {
    let result = super.call("getMinBid", "getMinBid(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toBigInt();
  }

  try_getMinBid(tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getMinBid", "getMinBid(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNftAddress(): Address {
    let result = super.call("getNftAddress", "getNftAddress():(address)", []);

    return result[0].toAddress();
  }

  try_getNftAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getNftAddress",
      "getNftAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get diffusedNftsAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BidCall extends ethereum.Call {
  get inputs(): BidCall__Inputs {
    return new BidCall__Inputs(this);
  }

  get outputs(): BidCall__Outputs {
    return new BidCall__Outputs(this);
  }
}

export class BidCall__Inputs {
  _call: BidCall;

  constructor(call: BidCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BidCall__Outputs {
  _call: BidCall;

  constructor(call: BidCall) {
    this._call = call;
  }
}

export class CallEndDateCall extends ethereum.Call {
  get inputs(): CallEndDateCall__Inputs {
    return new CallEndDateCall__Inputs(this);
  }

  get outputs(): CallEndDateCall__Outputs {
    return new CallEndDateCall__Outputs(this);
  }
}

export class CallEndDateCall__Inputs {
  _call: CallEndDateCall;

  constructor(call: CallEndDateCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CallEndDateCall__Outputs {
  _call: CallEndDateCall;

  constructor(call: CallEndDateCall) {
    this._call = call;
  }
}

export class CashInCall extends ethereum.Call {
  get inputs(): CashInCall__Inputs {
    return new CashInCall__Inputs(this);
  }

  get outputs(): CashInCall__Outputs {
    return new CashInCall__Outputs(this);
  }
}

export class CashInCall__Inputs {
  _call: CashInCall;

  constructor(call: CashInCall) {
    this._call = call;
  }
}

export class CashInCall__Outputs {
  _call: CashInCall;

  constructor(call: CashInCall) {
    this._call = call;
  }
}

export class ListTokenCall extends ethereum.Call {
  get inputs(): ListTokenCall__Inputs {
    return new ListTokenCall__Inputs(this);
  }

  get outputs(): ListTokenCall__Outputs {
    return new ListTokenCall__Outputs(this);
  }
}

export class ListTokenCall__Inputs {
  _call: ListTokenCall;

  constructor(call: ListTokenCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get openingBid(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get duration(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get minimumBidIncrement(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class ListTokenCall__Outputs {
  _call: ListTokenCall;

  constructor(call: ListTokenCall) {
    this._call = call;
  }
}

export class ListToken1Call extends ethereum.Call {
  get inputs(): ListToken1Call__Inputs {
    return new ListToken1Call__Inputs(this);
  }

  get outputs(): ListToken1Call__Outputs {
    return new ListToken1Call__Outputs(this);
  }
}

export class ListToken1Call__Inputs {
  _call: ListToken1Call;

  constructor(call: ListToken1Call) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get openingBid(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get duration(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ListToken1Call__Outputs {
  _call: ListToken1Call;

  constructor(call: ListToken1Call) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawFundsCall extends ethereum.Call {
  get inputs(): WithdrawFundsCall__Inputs {
    return new WithdrawFundsCall__Inputs(this);
  }

  get outputs(): WithdrawFundsCall__Outputs {
    return new WithdrawFundsCall__Outputs(this);
  }
}

export class WithdrawFundsCall__Inputs {
  _call: WithdrawFundsCall;

  constructor(call: WithdrawFundsCall) {
    this._call = call;
  }
}

export class WithdrawFundsCall__Outputs {
  _call: WithdrawFundsCall;

  constructor(call: WithdrawFundsCall) {
    this._call = call;
  }
}
